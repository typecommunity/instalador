#!/bin/bash

# reset shell colors
tput init

# https://stackoverflow.com/questions/59895/how-to-get-the-source-directory-of-a-bash-script-from-within-the-script-itself
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  PROJECT_ROOT="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$PROJECT_ROOT/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
PROJECT_ROOT="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

# required imports
source "${PROJECT_ROOT}"/variables/manifest.sh
source "${PROJECT_ROOT}"/utils/manifest.sh
source "${PROJECT_ROOT}"/lib/manifest.sh

# user configs file
if [[ ! -e "${PROJECT_ROOT}"/config ]]; then
  cat << EOF > "${PROJECT_ROOT}"/config
deploy_password=${deploy_password}
mysql_root_password=${mysql_root_password}
db_pass=${db_pass}
EOF
fi

# this file has passwords
sudo su - root <<EOF
chown root:root "${PROJECT_ROOT}"/config
chmod 700 "${PROJECT_ROOT}"/config
EOF
source "${PROJECT_ROOT}"/config

# interactive CLI
inquiry_options

#######################################
# FASE 1: ATUALIZAÇÃO DO SISTEMA
#######################################
print_banner
printf "${WHITE} 🚀 FASE 1: Atualizando sistema...${GRAY_LIGHT}\n\n"
apt-get update -y
apt-get upgrade -y

#######################################
# FASE 2: INSTALAÇÃO DO DOCKER PRIMEIRO
#######################################
print_banner
printf "${WHITE} 🚀 FASE 2: Instalando Docker...${GRAY_LIGHT}\n\n"

# Instalar Docker
apt-get install -y apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -

# Detectar a distribuição correta
if [ -f /etc/os-release ]; then
    . /etc/os-release
    if [ "$ID" = "debian" ]; then
        add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
    else
        add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
    fi
fi

apt-get update -y
apt-get install -y docker-ce docker-ce-cli containerd.io

# Iniciar Docker
systemctl start docker
systemctl enable docker

# Verificar se Docker está funcionando
docker --version
if [ $? -ne 0 ]; then
    printf "${RED} Erro ao instalar Docker!${NC}\n"
    exit 1
fi

#######################################
# FASE 3: CRIAR USUÁRIO DEPLOY
#######################################
print_banner
printf "${WHITE} 🚀 FASE 3: Criando usuário deploy...${GRAY_LIGHT}\n\n"

# Verificar se o usuário já existe
if ! id "deploy" &>/dev/null; then
    printf "${YELLOW} Criando novo usuário deploy...${GRAY_LIGHT}\n"
    useradd -m -p $(openssl passwd -crypt ${mysql_root_password}) -s /bin/bash deploy
    usermod -aG sudo deploy
    usermod -aG docker deploy
    printf "${GREEN} Usuário deploy criado com sucesso!${GRAY_LIGHT}\n"
else
    printf "${YELLOW} Usuário deploy já existe...${GRAY_LIGHT}\n"
    usermod -aG docker deploy
fi

# Verificar se o usuário foi criado
id deploy
if [ $? -ne 0 ]; then
    printf "${RED} Erro ao criar usuário deploy!${NC}\n"
    exit 1
fi

#######################################
# FASE 4: INSTALAR OUTRAS DEPENDÊNCIAS
#######################################
print_banner
printf "${WHITE} 🚀 FASE 4: Instalando dependências...${GRAY_LIGHT}\n\n"

# Node.js
curl -fsSL https://deb.nodesource.com/setup_20.x | bash -
apt-get install -y nodejs
npm install -g npm@latest
npm install -g pm2

# PostgreSQL
sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -
apt-get update -y
apt-get install -y postgresql postgresql-contrib
systemctl start postgresql
systemctl enable postgresql

# Nginx
apt-get install -y nginx
systemctl start nginx
systemctl enable nginx

# Criar diretórios do Nginx
mkdir -p /etc/nginx/sites-available
mkdir -p /etc/nginx/sites-enabled
mkdir -p /etc/nginx/conf.d

# Remover default do nginx se existir
rm -f /etc/nginx/sites-enabled/default

# Puppeteer dependencies
apt-get install -y libxshmfence-dev libgbm-dev wget unzip fontconfig locales \
    gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 \
    libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 \
    libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 \
    libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 \
    libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation \
    libappindicator1 libnss3 lsb-release xdg-utils

# Certbot
apt-get install -y snapd
snap install core
snap refresh core
snap install --classic certbot
ln -sf /snap/bin/certbot /usr/bin/certbot

# Configurar timezone
timedatectl set-timezone America/Sao_Paulo

#######################################
# FASE 5: CLONAR REPOSITÓRIO
#######################################
print_banner
printf "${WHITE} 🚀 FASE 5: Clonando repositório...${GRAY_LIGHT}\n\n"

sudo su - deploy <<EOF
git clone ${link_git} /home/deploy/${instancia_add}/
EOF

#######################################
# FASE 6: CONFIGURAR BACKEND
#######################################
print_banner
printf "${WHITE} 🚀 FASE 6: Configurando Backend...${GRAY_LIGHT}\n\n"

# Configurar variáveis de ambiente do backend
backend_url_clean=$(echo "${backend_url}" | sed 's|https://||g' | sed 's|http://||g' | sed 's|/.*||g')
frontend_url_clean=$(echo "${frontend_url}" | sed 's|https://||g' | sed 's|http://||g' | sed 's|/.*||g')

sudo su - deploy <<EOF
cat > /home/deploy/${instancia_add}/backend/.env << 'END'
NODE_ENV=production
BACKEND_URL=https://${backend_url_clean}
FRONTEND_URL=https://${frontend_url_clean}
PROXY_PORT=443
PORT=${backend_port}

DB_DIALECT=postgres
DB_HOST=localhost
DB_PORT=5432
DB_USER=${instancia_add}
DB_PASS=${mysql_root_password}
DB_NAME=${instancia_add}

JWT_SECRET=${jwt_secret}
JWT_REFRESH_SECRET=${jwt_refresh_secret}

REDIS_URI=redis://:${mysql_root_password}@127.0.0.1:${redis_port}
REDIS_OPT_LIMITER_MAX=1
REGIS_OPT_LIMITER_DURATION=3000

USER_LIMIT=${max_user}
CONNECTIONS_LIMIT=${max_whats}
CLOSED_SEND_BY_ME=true

MAIL_HOST="smtp.hostinger.com"
MAIL_USER="contato@seusite.com"
MAIL_PASS="senha"
MAIL_FROM="Recuperar Senha <contato@seusite.com>"
MAIL_PORT="465"
END
EOF

# Criar Redis
docker run --name redis-${instancia_add} -p ${redis_port}:6379 --restart always --detach redis redis-server --requirepass ${mysql_root_password}

# Criar banco PostgreSQL
sudo su - postgres <<EOF
createdb ${instancia_add}
psql <<SQL
CREATE USER ${instancia_add} WITH SUPERUSER INHERIT CREATEDB CREATEROLE PASSWORD '${mysql_root_password}';
SQL
EOF

# Instalar dependências e build do backend
sudo su - deploy <<EOF
cd /home/deploy/${instancia_add}/backend
npm install
npm run build
npx sequelize db:migrate
npx sequelize db:seed:all
pm2 start dist/server.js --name ${instancia_add}-backend
pm2 save
EOF

#######################################
# FASE 7: CONFIGURAR FRONTEND
#######################################
print_banner
printf "${WHITE} 🚀 FASE 7: Configurando Frontend...${GRAY_LIGHT}\n\n"

# Configurar variáveis de ambiente do frontend
sudo su - deploy <<EOF
cat > /home/deploy/${instancia_add}/frontend/.env << 'END'
REACT_APP_BACKEND_URL=https://${backend_url_clean}
REACT_APP_HOURS_CLOSE_TICKETS_AUTO=24
END

cat > /home/deploy/${instancia_add}/frontend/server.js << 'END'
//simple express server to run frontend production build;
const express = require("express");
const path = require("path");
const app = express();
app.use(express.static(path.join(__dirname, "build")));
app.get("/*", function (req, res) {
    res.sendFile(path.join(__dirname, "build", "index.html"));
});
app.listen(${frontend_port});
END
EOF

# Instalar dependências e build do frontend
sudo su - deploy <<EOF
cd /home/deploy/${instancia_add}/frontend
npm install
npm run build
pm2 start server.js --name ${instancia_add}-frontend
pm2 save
EOF

#######################################
# FASE 8: CONFIGURAR NGINX
#######################################
print_banner
printf "${WHITE} 🚀 FASE 8: Configurando Nginx...${GRAY_LIGHT}\n\n"

# Configurar nginx para backend
cat > /etc/nginx/sites-available/${instancia_add}-backend <<END
server {
  server_name ${backend_url_clean};
  
  location / {
    proxy_pass http://127.0.0.1:${backend_port};
    proxy_http_version 1.1;
    proxy_set_header Upgrade \$http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host \$host;
    proxy_set_header X-Real-IP \$remote_addr;
    proxy_set_header X-Forwarded-Proto \$scheme;
    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    proxy_cache_bypass \$http_upgrade;
  }
}
END

# Configurar nginx para frontend
cat > /etc/nginx/sites-available/${instancia_add}-frontend <<END
server {
  server_name ${frontend_url_clean};

  location / {
    proxy_pass http://127.0.0.1:${frontend_port};
    proxy_http_version 1.1;
    proxy_set_header Upgrade \$http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host \$host;
    proxy_set_header X-Real-IP \$remote_addr;
    proxy_set_header X-Forwarded-Proto \$scheme;
    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
    proxy_cache_bypass \$http_upgrade;
  }
}
END

# Criar links simbólicos
ln -sf /etc/nginx/sites-available/${instancia_add}-backend /etc/nginx/sites-enabled/
ln -sf /etc/nginx/sites-available/${instancia_add}-frontend /etc/nginx/sites-enabled/

# Configurar client_max_body_size
cat > /etc/nginx/conf.d/deploy.conf <<END
client_max_body_size 100M;
END

# Testar e reiniciar nginx
nginx -t
systemctl restart nginx

#######################################
# FASE 9: CONFIGURAR SSL
#######################################
print_banner
printf "${WHITE} 🚀 FASE 9: Configurando SSL...${GRAY_LIGHT}\n\n"

certbot --nginx \
    -m ${deploy_email} \
    --agree-tos \
    --non-interactive \
    --domains ${backend_url_clean},${frontend_url_clean}

#######################################
# FASE 10: CONFIGURAR PM2 STARTUP
#######################################
print_banner
printf "${WHITE} 🚀 FASE 10: Configurando PM2 Startup...${GRAY_LIGHT}\n\n"

pm2 startup systemd -u deploy --hp /home/deploy
sudo env PATH=$PATH:/usr/bin /usr/lib/node_modules/pm2/bin/pm2 startup systemd -u deploy --hp /home/deploy

#######################################
# FINALIZAÇÃO
#######################################
print_banner
printf "${GREEN} ✅ Instalação concluída com sucesso!${NC}\n\n"
printf "${WHITE} Acesse:${NC}\n"
printf "${CYAN_LIGHT} Frontend: https://${frontend_url_clean}${NC}\n"
printf "${CYAN_LIGHT} Backend: https://${backend_url_clean}${NC}\n\n"
printf "${YELLOW} Informações importantes:${NC}\n"
printf "${WHITE} Usuário: deploy${NC}\n"
printf "${WHITE} Senha: ${mysql_root_password}${NC}\n\n"
printf "${YELLOW} Verificar status dos serviços:${NC}\n"
printf "${WHITE} systemctl status postgresql${NC}\n"
printf "${WHITE} systemctl status nginx${NC}\n"
printf "${WHITE} systemctl status docker${NC}\n"
printf "${WHITE} docker ps${NC}\n"
printf "${WHITE} sudo su - deploy -c 'pm2 list'${NC}\n\n"
