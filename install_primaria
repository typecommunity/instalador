#!/bin/bash

# reset shell colors
tput init

# https://stackoverflow.com/questions/59895/how-to-get-the-source-directory-of-a-bash-script-from-within-the-script-itself
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  PROJECT_ROOT="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$PROJECT_ROOT/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
PROJECT_ROOT="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"

# required imports
source "${PROJECT_ROOT}"/variables/manifest.sh
source "${PROJECT_ROOT}"/utils/manifest.sh
source "${PROJECT_ROOT}"/lib/manifest.sh

# user configs file
if [[ ! -e "${PROJECT_ROOT}"/config ]]; then
  cat << EOF > "${PROJECT_ROOT}"/config
deploy_password=${deploy_password}
mysql_root_password=${mysql_root_password}
db_pass=${db_pass}
EOF
fi

# this file has passwords
sudo su - root <<EOF
chown root:root "${PROJECT_ROOT}"/config
chmod 700 "${PROJECT_ROOT}"/config
EOF
source "${PROJECT_ROOT}"/config

#######################################
# CORRE√á√ïES DIRETAS NO SCRIPT
#######################################

# Fun√ß√£o corrigida para criar banco de dados
backend_redis_create_fixed() {
  print_banner
  printf "${WHITE} üíª Criando Redis & Banco Postgres...${GRAY_LIGHT}"
  printf "\n\n"

  sleep 2

  # Criar container Redis
  sudo su - root <<EOF
  usermod -aG docker deploy
  docker run --name redis-${instancia_add} -p ${redis_port}:6379 --restart always --detach redis redis-server --requirepass ${mysql_root_password}
EOF

  sleep 2

  # Criar banco PostgreSQL corretamente
  sudo su - postgres <<EOF
  createdb ${instancia_add}
  psql <<SQL
CREATE USER ${instancia_add} WITH SUPERUSER INHERIT CREATEDB CREATEROLE PASSWORD '${mysql_root_password}';
SQL
EOF

  sleep 2
}

# Fun√ß√£o corrigida para configurar nginx do backend
backend_nginx_setup_fixed() {
  print_banner
  printf "${WHITE} üíª Configurando nginx (backend)...${GRAY_LIGHT}"
  printf "\n\n"

  sleep 2

  backend_hostname=$(echo "${backend_url/https:\/\/}")
  backend_hostname=$(echo "${backend_hostname/http:\/\/}")

  sudo su - root <<EOF
cat > /etc/nginx/sites-available/${instancia_add}-backend <<END
server {
  server_name ${backend_hostname};
  
  location / {
    proxy_pass http://127.0.0.1:${backend_port};
    proxy_http_version 1.1;
    proxy_set_header Upgrade \\\$http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host \\\$host;
    proxy_set_header X-Real-IP \\\$remote_addr;
    proxy_set_header X-Forwarded-Proto \\\$scheme;
    proxy_set_header X-Forwarded-For \\\$proxy_add_x_forwarded_for;
    proxy_cache_bypass \\\$http_upgrade;
  }
}
END

ln -sf /etc/nginx/sites-available/${instancia_add}-backend /etc/nginx/sites-enabled/${instancia_add}-backend
EOF

  sleep 2
}

# Fun√ß√£o corrigida para configurar nginx do frontend
frontend_nginx_setup_fixed() {
  print_banner
  printf "${WHITE} üíª Configurando nginx (frontend)...${GRAY_LIGHT}"
  printf "\n\n"

  sleep 2

  frontend_hostname=$(echo "${frontend_url/https:\/\/}")
  frontend_hostname=$(echo "${frontend_hostname/http:\/\/}")

  sudo su - root <<EOF
cat > /etc/nginx/sites-available/${instancia_add}-frontend <<END
server {
  server_name ${frontend_hostname};

  location / {
    proxy_pass http://127.0.0.1:${frontend_port};
    proxy_http_version 1.1;
    proxy_set_header Upgrade \\\$http_upgrade;
    proxy_set_header Connection 'upgrade';
    proxy_set_header Host \\\$host;
    proxy_set_header X-Real-IP \\\$remote_addr;
    proxy_set_header X-Forwarded-Proto \\\$scheme;
    proxy_set_header X-Forwarded-For \\\$proxy_add_x_forwarded_for;
    proxy_cache_bypass \\\$http_upgrade;
  }
}
END

ln -sf /etc/nginx/sites-available/${instancia_add}-frontend /etc/nginx/sites-enabled/${instancia_add}-frontend
EOF

  sleep 2
}

# Fun√ß√£o para garantir que os diret√≥rios do nginx existem
ensure_nginx_directories() {
  sudo su - root <<EOF
  # Criar diret√≥rios se n√£o existirem
  [ ! -d "/etc/nginx/sites-available" ] && mkdir -p /etc/nginx/sites-available
  [ ! -d "/etc/nginx/sites-enabled" ] && mkdir -p /etc/nginx/sites-enabled
  [ ! -d "/etc/nginx/conf.d" ] && mkdir -p /etc/nginx/conf.d
EOF
}

# Fun√ß√£o corrigida para instalar Node e PostgreSQL
system_node_install_fixed() {
  print_banner
  printf "${WHITE} üíª Instalando nodejs e PostgreSQL...${GRAY_LIGHT}"
  printf "\n\n"

  sleep 2

  sudo su - root <<EOF
  # Instalar Node.js
  curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
  apt-get install -y nodejs
  
  sleep 2
  
  # Atualizar npm
  npm install -g npm@latest
  
  sleep 2
  
  # Instalar PostgreSQL
  apt-get install -y wget ca-certificates
  sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt \$(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
  wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add -
  apt-get update -y 
  apt-get -y install postgresql postgresql-contrib
  
  # Iniciar PostgreSQL
  systemctl start postgresql
  systemctl enable postgresql
  
  sleep 2
  
  # Configurar timezone
  timedatectl set-timezone America/Sao_Paulo
EOF

  sleep 2
}

# Fun√ß√£o corrigida para criar usu√°rio
system_create_user_fixed() {
  print_banner
  printf "${WHITE} üíª Criando usu√°rio deploy...${GRAY_LIGHT}"
  printf "\n\n"

  sleep 2

  # Verificar se o usu√°rio j√° existe
  if ! id "deploy" &>/dev/null; then
    sudo su - root <<EOF
    useradd -m -p \$(openssl passwd -crypt ${mysql_root_password}) -s /bin/bash -G sudo deploy
    usermod -aG sudo deploy
EOF
  else
    printf "${YELLOW} Usu√°rio deploy j√° existe, pulando cria√ß√£o...${GRAY_LIGHT}\n"
  fi

  # Garantir que deploy est√° no grupo docker
  sudo usermod -aG docker deploy 2>/dev/null || true

  sleep 2
}

#######################################
# IN√çCIO DA INSTALA√á√ÉO
#######################################

# interactive CLI
inquiry_options

# dependencies related
system_update
system_node_install_fixed  # Usando a vers√£o corrigida
system_pm2_install
system_docker_install
system_puppeteer_dependencies
system_snapd_install
system_nginx_install

# Garantir que os diret√≥rios do nginx existem
ensure_nginx_directories

system_certbot_install

# system config
system_create_user_fixed  # Usando a vers√£o corrigida

# backend related
system_git_clone
backend_set_env
backend_redis_create_fixed  # Usando a vers√£o corrigida
backend_node_dependencies
backend_node_build
backend_db_migrate
backend_db_seed
backend_start_pm2
backend_nginx_setup_fixed  # Usando a vers√£o corrigida

# frontend related
frontend_set_env
frontend_node_dependencies
frontend_node_build
frontend_start_pm2
frontend_nginx_setup_fixed  # Usando a vers√£o corrigida

# network related
system_nginx_conf
system_nginx_restart
system_certbot_setup

# Mensagem final
print_banner
printf "${GREEN} ‚úÖ Instala√ß√£o conclu√≠da com sucesso!${NC}\n"
printf "${WHITE} Acesse:${NC}\n"
printf "${CYAN_LIGHT} Frontend: ${frontend_url}${NC}\n"
printf "${CYAN_LIGHT} Backend: ${backend_url}${NC}\n"
printf "\n"
